{"version":3,"sources":["static/x.svg","components/home/Home.js","components/navbar/NavBarData.js","components/navbar/NavBar.js","utils/PinataKeys.js","components/snackbar/Snackbar.js","utils/TriggerSnackbar.js","components/mint/Mint.js","components/loader/Loader.js","components/popup/PopUp.js","components/actions/ReList.js","components/actions/SellNft.js","components/actions/SendNft.js","components/myNfts/OwnedNfts.js","components/marketplace/MarketItem.js","components/marketplace/Marketplace.js","components/account/AccountStatus.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","useState","account","setAccount","ownedNfts","setOwnedNfts","useEffect","loadBlockchainData","a","provider","ethers","providers","Web3Provider","window","ethereum","myContract","Contract","tokenAddress","MyTokenContract","abi","getSigner","getAddress","then","res","balanceOf","totalTokens","console","log","toNumber","className","to","icon","faShop","size","faHammer","faWallet","SidebarData","title","faHome","link","NavBar","sidebar","setSidebar","showSidebar","event","onClick","faTimes","map","obj","key","faAlignJustify","PinataKeys","apiKey","apiSecret","Snackbar","closeTimeout","setCloseTimeout","beginCloseTimeout","closeSnackBar","clearTimeout","ReactDOM","unmountComponentAtNode","document","getElementById","timer","timeout","setTimeout","messageType","onMouseEnter","onMouseLeave","message","src","xIcon","alt","id","triggerSnackbar","includes","Error","render","showErrorMessage","showSuccessMessage","showWarningMessage","Mint","nftName","setNftName","uploadedFile","setUploadedFile","imageUrl","setImageUrl","artistName","setArtistName","canMint","setCanMint","signer","checkCanMint","mintNft","nftHash","metadataHash","connect","mint","on","tokenId","reloadFields","Array","from","querySelectorAll","forEach","input","value","pinFileToIPFS","file","nftImage","FormData","append","axios","post","maxContentLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","response","data","IpfsHash","hash","catch","error","type","onKeyUp","target","onChange","preventDefault","reader","FileReader","files","onloadend","result","readAsDataURL","click","undefined","Loader","isActive","style","PopUp","open","setOpen","wrapperRef","useRef","handleClickOutside","current","contains","addEventListener","removeEventListener","ref","buttonLabel","content","ReList","price","setPrice","marketplaceContract","marketAddress","Marketplace","changePrice","changeItemPrice","itemId","utils","parseEther","triggerReload","name","step","min","faEthereum","SellNft","sellNft","validatePrice","overrides","listingPrice","myNftContract","approve","createMarketItem","location","reload","SendNft","toAddress","setToAddress","isAddress","sendNft","OwnedNfts","nftData","setNftData","listedItems","setListedItems","unlistedItems","setUnlistedItems","activeTab","setActiveTab","triggerUseEffect","setTriggerUseEffect","triggerLoader","setTriggerLoader","tokenContract","MarketplaceContract","listAccounts","fetchOwnedNfts","fetchListedItems","getOwnedNfts","items","tokensList","Promise","all","tokenURI","url","fetch","json","createdBy","getListedItemsBySeller","listedNfts","seller","owner","formatEther","cancelItem","accounts","cancelListing","length","nft","index","loading","faPenToSquare","MarketItem","userAccount","setUserAccount","onBuyClick","marketPlace","sellMarketItem","item","marketItems","setMarketItems","filteredList","setFilteredList","search","setSearch","setTriggerReload","marketplace","fetchMarketItems","filter","toLowerCase","indexOf","ERC721Contract","nftContract","toString","placeholder","e","AccountStatus","setIsConnected","connectedAcc","setconnectedAcc","isConnected","App","setListingPrice","getListingPrice","exact","path","element","Boolean","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfd1e38d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.a517e8be.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport MyTokenContract from \"../../contracts/MyToken.json\";\r\nimport { Contract, ethers } from \"ethers\";\r\nimport './Home.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faShop, faWallet, faHammer } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n\r\n  const [account, setAccount] = useState(\"\");\r\n\r\n  const [ownedNfts, setOwnedNfts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadBlockchainData();\r\n  }, [account, ownedNfts])\r\n\r\n\r\n  const loadBlockchainData = async () => {\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    var myContract = new Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n    signer.getAddress().then(function (res) {\r\n      setAccount(res);\r\n    })\r\n\r\n    const totalTokens = await myContract.balanceOf(account);\r\n\r\n    console.log(\"on loading blockchain data : \" + account)\r\n\r\n    setOwnedNfts(totalTokens.toNumber());\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"home\">\r\n        <div className=\"title\">\r\n          <h1>Welcome to NFT CREATOR!</h1>\r\n        </div>\r\n\r\n\r\n        <div className=\"wrapper\">\r\n\r\n          <Link to={\"/marketplace\"} className=\"tab\">\r\n          <div className=\"tab-1\">\r\n            <div className=\"message-1\">\r\n              <h1>Marketplace</h1>\r\n            </div>\r\n            <div className=\"icon\">\r\n              <FontAwesomeIcon icon={faShop} size={\"3x\"} />\r\n            </div>\r\n          </div>\r\n          </Link>\r\n\r\n          <Link to={\"/mint\"} className=\"tab\">\r\n                 \r\n          <div className=\"tab-2\">\r\n            <div className=\"message-2\">\r\n              <h1>Mint Your NFT</h1>\r\n            </div>\r\n            <div className=\"icon\">\r\n              <FontAwesomeIcon icon={faHammer} size={\"3x\"} />\r\n            </div>\r\n          </div>\r\n\r\n          </Link>\r\n\r\n          <Link to={\"/myNfts\"} className=\"tab\">\r\n          <div className=\"tab-3\">\r\n            <div className=\"message-3\">\r\n              <h1>Your NFTs</h1>\r\n            </div>\r\n            <div className=\"icon\">\r\n              <FontAwesomeIcon icon={faWallet} size={\"3x\"} />\r\n            </div>\r\n\r\n          </div>\r\n          </Link>\r\n \r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faHome, faHammer, faWallet, faShop} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nexport const SidebarData =  [\r\n  {\r\n      title: \"Home\",\r\n      icon: <FontAwesomeIcon icon={faHome}/>,\r\n      link: \"/\"\r\n  },\r\n  {\r\n    title: \"Mint\",\r\n    icon: <FontAwesomeIcon icon={faHammer}/>,\r\n    link: \"/mint\"\r\n  },\r\n  {\r\n    title: \"My Nfts\",\r\n    icon: <FontAwesomeIcon icon={faWallet}/>,\r\n    link: \"/myNfts\"\r\n  },\r\n  {\r\n    title: \"Marketplace\",\r\n    icon: <FontAwesomeIcon icon={faShop}/>,\r\n    link: \"/marketplace\"\r\n  }\r\n];\r\n\r\n","import React, { useState } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./NavBar.scss\";\r\nimport {SidebarData} from \"./NavBarData\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faTimes, faAlignJustify} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction NavBar(props) {\r\n    const [sidebar,setSidebar] = useState(false);\r\n\r\n    const showSidebar = (event) => {\r\n      setSidebar(!sidebar);\r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n       <div className = {sidebar ? \"sidebar-active\" : \"sidebar\"}>\r\n       <div className=\"header\">\r\n              <FontAwesomeIcon onClick={showSidebar} icon={faTimes}></FontAwesomeIcon>\r\n        </div>\r\n        <ul className=\"sidebarList\">\r\n          {SidebarData.map((obj,key)=>{\r\n            return (\r\n              <>\r\n              <Link to={obj.link} key={obj.link}>\r\n              <li key={obj.link} className=\"row\">\r\n                <div>\r\n                  <text className=\"sideBarFont\">{obj.title}</text>\r\n                <div className=\"listIcon\"> {obj.icon} </div>\r\n                </div>\r\n              </li>\r\n              </Link>\r\n              </>\r\n            )\r\n          })\r\n\r\n          }\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <FontAwesomeIcon onClick={showSidebar} icon={faAlignJustify} className = {sidebar ? \"menuIcon-hidden\" : \"menuIcon\"}></FontAwesomeIcon>\r\n      </div>\r\n      </>\r\n    );\r\n   \r\n};\r\n\r\nexport default NavBar;","\r\nexport const PinataKeys =  [\r\n    {\r\n        apiKey: \"ca7f12bf77c0e75f0bbf\",\r\n        apiSecret: \"4eb7f35ac6d804926a813b4fcf2d90f63255d2e70ce784626ee38b8e4d0d9be0\"\r\n    }\r\n  ];","import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport \"./Snackbar.css\";\r\nimport xIcon from \"../../static/x.svg\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction Snackbar(props) {\r\n    const [closeTimeout, setCloseTimeout] = useState(null);\r\n\r\n    useEffect(() => {\r\n        beginCloseTimeout();\r\n    }, []);\r\n\r\n\r\n    const closeSnackBar = () => {\r\n        clearTimeout(closeTimeout);\r\n        ReactDOM.unmountComponentAtNode(document.getElementById('snackbar-fixed-container'));\r\n    }\r\n\r\n\r\n    const beginCloseTimeout = () => {\r\n        if (props.timer) {\r\n            const timeout = setTimeout(() => closeSnackBar(), props.timer);\r\n            setCloseTimeout(timeout);\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className={`snackbar-container ${props.messageType}-container`}\r\n            onMouseEnter={() => clearTimeout(closeTimeout)}\r\n            onMouseLeave={() => beginCloseTimeout()}>\r\n            <div>\r\n                <div className=\"snackbar-info-container\">\r\n                    <div>\r\n                        <div className={`snackbar-icon ${props.messageType}-snackbar-icon`}></div>\r\n                    </div>\r\n                    <div>\r\n                        <h5 className=\"rubik-text\">{props.title}</h5>\r\n                        <h5 className=\"muted-rubik-text\">  {props.message}</h5>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <img src={xIcon} onClick={() => closeSnackBar()} alt=\"close icon\" id=\"close-snackbar-icon\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Snackbar","import React from 'react';\r\nimport Snackbar from '../components/snackbar/Snackbar';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst triggerSnackbar = (title, message, messageType) => {\r\n    const validMessageTypes = ['error', 'info', 'warning', 'success'];\r\n    \r\n    if (!validMessageTypes.includes(messageType)) {\r\n        throw Error(\"Invalid snackbar message type\");\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <Snackbar messageType={messageType} timer={5000} title={title} message={message} />,\r\n        document.getElementById('snackbar-fixed-container')\r\n    );\r\n}\r\n\r\n\r\nexport const showErrorMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'error');\r\n}\r\n\r\nexport const showInfoMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'info');\r\n}\r\n\r\nexport const showSuccessMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'success');\r\n}\r\n\r\nexport const showWarningMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'warning');\r\n}","import React, {useEffect, useState } from 'react';\r\nimport MyTokenContract from \"../../contracts/MyToken.json\";\r\nimport \"./Mint.scss\"\r\nimport axios from \"axios\";\r\nimport { PinataKeys } from \"../../utils/PinataKeys\";\r\nimport { ethers, utils } from 'ethers';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\n\r\n\r\nfunction Mint(props) {\r\n\r\n    const [nftName, setNftName] = useState(\"\");\r\n\r\n    const [uploadedFile, setUploadedFile] = useState(null);\r\n\r\n    const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n    const [artistName, setArtistName] = useState(\"\");\r\n\r\n    const [canMint, setCanMint] = useState(false);\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n    const myContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n    useEffect(() => {\r\n        checkCanMint();\r\n    }, [artistName, imageUrl, nftName, canMint])\r\n\r\n\r\n    const mintNft = async (nftHash, metadataHash) => {\r\n\r\n        try {\r\n            await myContract.connect(signer).mint(nftHash, metadataHash);\r\n\r\n            myContract.on(\"tokenMint\", (tokenId) => {\r\n\r\n                showSuccessMessage(\"Congratulations!\", \"NFT successfully minted!\");\r\n                reloadFields();\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorMessage(error.message);\r\n        }\r\n\r\n    };\r\n\r\n    const handleNftNameOnChange = (event) => {\r\n        setNftName(event.target.value);\r\n\r\n    }\r\n\r\n    const handleArtistNameOnChange = (event) => {\r\n        setArtistName(event.target.value);\r\n    }\r\n\r\n    const placeholderOnClick = () => {\r\n        document.getElementById('uploadImage').click();\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n\r\n        try {\r\n            pinFileToIPFS(uploadedFile);\r\n        } catch (error) {\r\n            showErrorMessage(\"Something went wrong!\", error.message);\r\n        }\r\n\r\n    }\r\n\r\n    const checkCanMint = () => {\r\n        if (nftName !== \"\" && artistName !== \"\" && imageUrl !== \"\") {\r\n            setCanMint(true);\r\n        }\r\n\r\n        if (canMint && (nftName === '' || artistName === '' || imageUrl === '')) {\r\n            setCanMint(false);\r\n        }\r\n    }\r\n\r\n    const reloadFields = () => {\r\n\r\n        setUploadedFile(null);\r\n        setNftName(\"\");\r\n        setArtistName(\"\");\r\n        setImageUrl(\"\");\r\n\r\n        Array.from(document.querySelectorAll(\"input\")).forEach(\r\n            input => (input.value = \"\")\r\n          );\r\n       \r\n    }\r\n\r\n    const fileOnChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n\r\n        let file = event.target.files[0];\r\n\r\n        setUploadedFile(file);\r\n\r\n        reader.onloadend = () => {\r\n            console.log(\"reading file\");\r\n            setImageUrl(reader.result);\r\n        }\r\n\r\n        reader.readAsDataURL(file);\r\n\r\n    }\r\n\r\n    const pinFileToIPFS = async (file) => {\r\n        const fileUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n\r\n        const jsonUrl = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n\r\n        let nftImage = new FormData();\r\n\r\n        nftImage.append(\"file\", file);\r\n\r\n\r\n        axios.post(fileUrl, nftImage, {\r\n            maxContentLength: \"Infinity\",\r\n            headers: {\r\n                \"Content-Type\": `multipart/form-data; boundary=${nftImage._boundary}`,\r\n                pinata_api_key: PinataKeys[0].apiKey,\r\n                pinata_secret_api_key: PinataKeys[0].apiSecret,\r\n            }\r\n        }).then(function (response) {\r\n            console.log(response.data.IpfsHash)\r\n\r\n            return response.data.IpfsHash\r\n\r\n        }).then(function (hash) {\r\n\r\n            axios.post(jsonUrl, {\r\n                \"name\": nftName,\r\n                \"hash\": hash,\r\n                \"createdBy\": artistName\r\n            }, {\r\n                headers: {\r\n                    pinata_api_key: PinataKeys[0].apiKey,\r\n                    pinata_secret_api_key: PinataKeys[0].apiSecret,\r\n                }\r\n            }).then(function (response) {\r\n\r\n                const metadataHash = \"ipfs/\" + response.data.IpfsHash;\r\n\r\n                mintNft(hash, metadataHash);\r\n            }).catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        })\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"mint\">\r\n            <div className=\"title\">\r\n                <h1>Mint Your NFT</h1>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"left\">\r\n                        <div className=\"inputBox\">\r\n                            <label className=\"boldFont\">Type your NFT name</label>\r\n                            <input type=\"text\" onKeyUp={handleNftNameOnChange} className=\"inputField\"></input>\r\n                        </div>\r\n\r\n\r\n                        <input id='uploadImage' type=\"file\" onChange={fileOnChange} className=\"inputField imageInput\"></input>\r\n\r\n                        <div className=\"inputBox\">\r\n                            <label className=\"boldFont\">Artist Name</label>\r\n                            <input type=\"text\" onKeyUp={handleArtistNameOnChange} className=\"inputField\"></input>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"right\">\r\n                        <div className=\"imageCtn\">\r\n                            {imageUrl && <img src={imageUrl} className=\"image\"></img>}\r\n                            {imageUrl === '' && <div className=\"image\" onClick={placeholderOnClick}><h1>Please upload an image</h1></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"button\">\r\n                    <div onClick={canMint ? handleSubmit : undefined} className={canMint ? 'mintBtn' : \"mintBtn-disabled\"}><span>Mint</span></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint","import React, { useEffect } from 'react';\r\nimport \"./Loader.css\";\r\n\r\nfunction Loader(props) {\r\n\r\n    useEffect(() => {\r\n        console.log(\"hey loader\",props.isActive);\r\n\r\n    },[props.isActive])\r\n\r\n  return (\r\n      <div className={props.isActive ? 'loaderWrapper-active' : 'loaderWrapper'}>\r\n             <div className='lds-hourglass loader'></div>7\r\n             <div><h1 style={{'color':'black'}}>Loading ...</h1></div>\r\n      </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Loader","import React, { useEffect, useState, useRef } from \"react\";\r\nimport './PopUp.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst PopUp = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const wrapperRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (wrapperRef.current && !wrapperRef.current.contains(event.target) && open) {\r\n        setOpen(false);\r\n      }\r\n    }\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [open]);\r\n\r\n\r\n  return (\r\n    <div className=\"popup\" ref={wrapperRef}>\r\n\r\n      <div>\r\n        <button onClick={() => setOpen(!open)}> {props.buttonLabel} </button>\r\n        {open && (\r\n          <>\r\n            <div className=\"popup-content\">\r\n              <div className=\"exit\">\r\n                <FontAwesomeIcon className=\"icon\" onClick={() => setOpen(false)} icon={faTimes} size={\"2x\"}  />\r\n              </div>\r\n              {props.content}\r\n            </div>\r\n\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopUp;","import React, {useEffect, useState, useRef} from 'react';\r\nimport \"./Actions.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\nimport { ethers } from 'ethers';\r\nimport Marketplace from \"../../contracts/Marketplace.json\";\r\n\r\nfunction ReList(props) {\r\n    const [price, setPrice] = useState(\"\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, Marketplace.abi, provider);\r\n\r\n    const handlePriceChange = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n\r\n    const changePrice = async () => {\r\n      try {\r\n        await marketplaceContract.connect(signer).changeItemPrice(props.itemId, ethers.utils.parseEther(price));\r\n        props.triggerReload();\r\n        showSuccessMessage(\"Yay!\",\"The price of your NFT have been succefully changed.\");\r\n      } catch (error) {\r\n        showErrorMessage(error.message)\r\n      }\r\n    }\r\n\r\n  return (\r\n  \r\n       \r\n            <div className=\"actions-content\">\r\n                <div>\r\n                <h5>{\"Please enter \" + props.name + \" #\"+ props.tokenId + \"'s price\"}</h5>\r\n                    <input onChange={handlePriceChange} className=\"mt-3\" type=\"number\" step=\"0.01\" min=\"0\"></input>\r\n                    <FontAwesomeIcon style={{'marginLeft':'10px'}} icon={faEthereum}/>\r\n                </div>\r\n                <div className='actions'>\r\n                    <button onClick={changePrice}>Change Price</button>\r\n                </div>\r\n            </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ReList","import React, { useState, useRef, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { utils } from 'ethers';\r\nimport MyTokenContract from \"../../contracts/MyToken.json\"\r\nimport Marketplace from \"../../contracts/Marketplace.json\";\r\nimport \"./Actions.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { showErrorMessage, showSuccessMessage, showWarningMessage } from '../../utils/TriggerSnackbar';\r\n\r\n\r\nfunction SellNft(props) {\r\n    const [price, setPrice] = useState(\"\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, Marketplace.abi, provider);\r\n\r\n    const handlePriceChange = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n\r\n    const sellNft = async () => {\r\n\r\n        if (validatePrice()) {\r\n            const signer = provider.getSigner();\r\n\r\n            let overrides = { value: utils.parseEther(props.listingPrice) };\r\n\r\n            let myNftContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n            await myNftContract.connect(signer).approve(props.marketAddress, props.tokenId);\r\n\r\n            showWarningMessage(\"\", \"Approving...\");\r\n\r\n            await marketplaceContract.connect(signer).createMarketItem(props.tokenAddress, props.tokenId, utils.parseEther(price), overrides);\r\n\r\n            marketplaceContract.on(\"MarketItemCreated\", ({ tokenId }) => {\r\n                window.location.reload();\r\n\r\n                setTimeout(() => {\r\n                    showSuccessMessage(\"Yay!\", \"Your NFT was successfully listed.\");\r\n                }, 2000);\r\n              \r\n\r\n            })\r\n\r\n        } else {\r\n            showErrorMessage(\"Oops!\", \"NFT price must be greater than 0 ether\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const validatePrice = () => {\r\n        if (price <= 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n            <div className=\"actions-content\">\r\n                <div>\r\n                    <h5>{\"Please enter \" + props.name + \" #\" + props.tokenId + \"'s price\"}</h5>\r\n                    <input onChange={handlePriceChange} className=\"mt-3\" type=\"number\" step=\"0.01\" min=\"0\"></input>\r\n                    <FontAwesomeIcon style={{ 'marginLeft': '10px' }} icon={faEthereum} />\r\n                </div>\r\n                <div className='actions'>\r\n                    <button onClick={sellNft}>Sell</button>\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SellNft","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport MyTokenContract from \"../../contracts/MyToken.json\"\r\nimport './Actions.scss';\r\nimport { showErrorMessage, showSuccessMessage } from \"../../utils/TriggerSnackbar\";\r\n\r\nconst SendNft = (props) => {\r\n    const [toAddress, setToAddress] = useState(\"\");\r\n\r\n    const handleTextChange = (event) => {\r\n        console.log(toAddress);\r\n        setToAddress(event.target.value);\r\n    }\r\n\r\n    const sendNft = () => {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        const signer = provider.getSigner();\r\n\r\n        if (ethers.utils.isAddress(toAddress)) {\r\n            var myNftContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n            myNftContract.connect(signer).sendNft(toAddress, props.tokenId).then(function (res) {\r\n                props.triggerReload();\r\n                showSuccessMessage(\"Yay!\", \"Your NFT was successfully sent.\");\r\n            })\r\n        } else {\r\n            showErrorMessage(\"Oops!\", \"You must enter a valid address\");\r\n        }\r\n\r\n    }\r\n\r\n    return (    \r\n            <div className=\"actions-content\">\r\n                <div>\r\n                    <h5>Please insert a valid address</h5>\r\n                    <input onChange={handleTextChange} className=\"mt-3\" type=\"text\"></input>\r\n                </div>\r\n                <div className=\"actions\">\r\n                    <button onClick={sendNft} className=\"btn btn-primary btn-sm\">Send</button>\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SendNft;","import React, { useState, useEffect } from \"react\";\r\nimport MyTokenContract from \"../../contracts/MyToken.json\";\r\nimport MarketplaceContract from \"../../contracts/Marketplace.json\";\r\nimport { ethers } from \"ethers\";\r\nimport \"./OwnedNfts.scss\";\r\nimport { showErrorMessage, showSuccessMessage } from \"../../utils/TriggerSnackbar\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPenToSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faEthereum } from \"@fortawesome/free-brands-svg-icons/faEthereum\";\r\nimport Loader from \"../loader/Loader\";\r\nimport PopUp from \"../popup/PopUp\";\r\nimport ReList from \"../actions/ReList\";\r\nimport SellNft from \"../actions/SellNft\";\r\nimport SendNft from \"../actions/SendNft\";\r\n\r\nconst OwnedNfts = (props) => {\r\n\r\n    const [nftData, setNftData] = useState();\r\n\r\n    const [listedItems, setListedItems] = useState();\r\n\r\n    const [unlistedItems, setUnlistedItems] = useState();\r\n\r\n    const [activeTab, setActiveTab] = useState(\"UI\");\r\n\r\n    const [triggerUseEffect, setTriggerUseEffect] = useState(false);\r\n\r\n    const [triggerLoader, setTriggerLoader] = useState(false);\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    const tokenContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, MarketplaceContract.abi, provider);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n    const account = provider.listAccounts()[0];\r\n\r\n\r\n    useEffect(() => {\r\n        setTriggerLoader(true);\r\n        fetchOwnedNfts();\r\n        fetchListedItems();\r\n\r\n    }, [triggerUseEffect])\r\n\r\n    useEffect(() => {\r\n        if (activeTab === \"LI\") {\r\n            setNftData(listedItems)\r\n        } else {\r\n            setNftData(unlistedItems);\r\n        }\r\n    }, [activeTab])\r\n\r\n    useEffect(() => {\r\n\r\n    }, [triggerLoader])\r\n\r\n\r\n    const fetchOwnedNfts = async () => {\r\n        const items = await tokenContract.connect(signer).getOwnedNfts();\r\n\r\n        let tokensList = [];\r\n\r\n        tokensList = await Promise.all(items.map(async (tokenId) => {\r\n            tokenId = tokenId.toNumber();\r\n\r\n            const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n            const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n            return {\r\n                name,\r\n                hash,\r\n                createdBy,\r\n                tokenId\r\n            }\r\n\r\n        }));\r\n\r\n        setUnlistedItems(tokensList);\r\n        setNftData(tokensList);\r\n    }\r\n\r\n    const fetchListedItems = async () => {\r\n        const items = await marketplaceContract.connect(signer).getListedItemsBySeller();\r\n\r\n        let listedNfts = [];\r\n\r\n        listedNfts = await Promise.all(items.map(async ({ tokenId, itemId, seller, owner, price }) => {\r\n            tokenId = tokenId.toNumber();\r\n            itemId = itemId.toNumber();\r\n            price = ethers.utils.formatEther(price);\r\n\r\n            console.log(owner, seller, itemId, tokenId);\r\n\r\n            const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n            const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n            return {\r\n                name,\r\n                hash,\r\n                createdBy,\r\n                tokenId,\r\n                itemId,\r\n                price\r\n            }\r\n\r\n        }));\r\n\r\n        setListedItems(listedNfts);\r\n        setTriggerLoader(false);\r\n    }\r\n\r\n    const cancelItem = async (itemId) => {\r\n        const accounts = await provider.listAccounts();\r\n        let account = accounts[0];\r\n\r\n        try {\r\n            await marketplaceContract.connect(signer).cancelListing(props.tokenAddress, itemId, { from: account });\r\n            window.location.reload();\r\n            showSuccessMessage(\"Success!\", \"Your item was unlisted.\")\r\n            setTriggerUseEffect(!triggerUseEffect);\r\n\r\n\r\n            window.location.reload();\r\n        } catch (error) {\r\n            showErrorMessage(error.message);\r\n            console.log(error);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Loader isActive={triggerLoader} />\r\n            <div className=\"ownedNfts\">\r\n                <div className=\"title\">\r\n                    <h1>Your NFT's</h1>\r\n                </div>\r\n                <div className=\"listingPrice\">\r\n                    {'Listing price is ' + props.listingPrice + \" ether\"}\r\n                </div>\r\n                {listedItems && unlistedItems && <div className=\"tabs\">\r\n                    <div className={activeTab === \"UI\" ? \"tab active\" : \"tab\"} onClick={() => { setActiveTab(\"UI\") }}>{\"Unlisted items (\" + unlistedItems.length + \")\"}</div>\r\n                    <div className={activeTab === \"LI\" ? \"tab active\" : \"tab\"} onClick={() => { setActiveTab(\"LI\") }}>{\"Listed items (\" + listedItems.length + \")\"}</div>\r\n                </div>}\r\n                <div className=\"wrapper\">\r\n                    {nftData && (\r\n                        <div className=\"content-list\">\r\n                            {\r\n                                nftData.map((nft, index) => (\r\n\r\n                                    <div className=\"content\" key={index}>\r\n                                        <div className=\"item\">\r\n                                            <div className=\"nft\">\r\n                                                <div className=\"nft-name\">\r\n                                                    <h4>{nft.name}</h4>\r\n                                                </div>\r\n                                                <div className=\"nft-image\">\r\n                                                    <img className=\"image\" loading=\"lazy\" src={\"https://gateway.pinata.cloud/ipfs/\" + nft.hash}></img>\r\n                                                </div>\r\n                                                <div className=\"nft-actions\">\r\n                                                    {\r\n                                                        activeTab === \"UI\" && <>\r\n                                                            <PopUp buttonLabel={'Sell NFT'} content={<SellNft tokenAddress={props.tokenAddress} marketAddress={props.marketAddress} tokenId={nft.tokenId} name={nft.name} listingPrice={props.listingPrice} />} />\r\n                                                            <PopUp buttonLabel={'Send NFT'} content={<SendNft tokenAddress={props.tokenAddress} triggerReload={setTriggerUseEffect} />} />\r\n                                                        </>\r\n                                                    }\r\n                                                    {\r\n                                                        activeTab === \"LI\" && <>\r\n                                                            <div className=\"edit-price\">\r\n                                                                <div style={{'color':'black'}}>\r\n                                                                {\"Price: \" + nft.price}\r\n                                                                <FontAwesomeIcon className=\"edit-icon\" icon={faEthereum}/>\r\n                                                                </div>\r\n                                                                <div >\r\n                                                                <PopUp buttonLabel={<FontAwesomeIcon icon={faPenToSquare} />} content={<ReList tokenAddress={props.tokenAddress} marketAddress={props.marketAddress} name={nft.name} tokenId={nft.tokenId} itemId={nft.itemId} />} />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                           \r\n                                                            <button onClick={() => { cancelItem(nft.itemId) }}>Cancel Listing</button>\r\n                                                        </>\r\n                                                    }\r\n\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                ))\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    )}\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default OwnedNfts;\r\n\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./MarketItem.scss\";\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { ethers } from 'ethers';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\n\r\nfunction MarketItem(props) {\r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  const signer = provider.getSigner();\r\n\r\n  const [userAccount, setUserAccount] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    provider.listAccounts().then((accounts) => {\r\n      setUserAccount(accounts[0]);\r\n    })\r\n\r\n\r\n  }, [userAccount])\r\n\r\n  const onBuyClick = async () => {\r\n    console.log(userAccount);\r\n    try {\r\n      await props.marketPlace.connect(signer).sellMarketItem(props.tokenAddress, props.item.itemId, { value: ethers.utils.parseEther(props.item.price) });\r\n      showSuccessMessage(\"Comgratulations!\", \"You have successfully bought \" + props.item.name + \" NFT.\");\r\n      props.triggerReload();\r\n    } catch (error) {\r\n      showErrorMessage(\"Something went wrong!\", error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"item\">\r\n        <div className=\"market-item\">\r\n          <div className=\"market-item-name\">\r\n            <h4>{props.item.name + ' #' + props.item.tokenId} </h4>\r\n          </div>\r\n          <div className=\"market-item-image\">\r\n            <img className=\"image\" src={\"https://gateway.pinata.cloud/ipfs/\" + props.item.hash}></img>\r\n          </div>\r\n          <div className=\"market-item-actions\">\r\n            {\r\n              props.seller !== userAccount && <button onClick={onBuyClick}>Buy</button>\r\n            }\r\n\r\n            <div className=\"price\">\r\n              <span>{\"Price: \" + props.item.price}</span>\r\n              <FontAwesomeIcon icon={faEthereum} className=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarketItem","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport MarketplaceContract from \"../../contracts/Marketplace.json\";\r\nimport ERC721Contract from \"../../contracts/ERC721.json\";\r\nimport \"./Marketplace.scss\";\r\nimport MarketItem from './MarketItem';\r\n\r\nfunction Marketplace(props) {\r\n\r\n  const [marketItems, setMarketItems] = useState([]);\r\n\r\n  const [filteredList, setFilteredList] = useState([]);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [triggerReload,setTriggerReload] = useState(false);\r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  const marketplace = new ethers.Contract(props.marketAddress, MarketplaceContract.abi, provider);\r\n\r\n  const signer = provider.getSigner();\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    fetchMarketItems();\r\n\r\n  }, [triggerReload])\r\n\r\n  useEffect(() => {\r\n    if(marketItems.length !== 0){\r\n    const filteredList = marketItems.filter((item) => {\r\n      let all_str = `${item.tokenId} ${item.name}`.toLowerCase();\r\n   \r\n      return all_str.indexOf(search) > -1 \r\n    });\r\n    setFilteredList(filteredList);\r\n  }\r\n\r\n  }, [search,marketItems])\r\n\r\n  const fetchMarketItems = async () => {\r\n    const items = await marketplace.connect(signer).fetchMarketItems();\r\n    let tokenContract = new ethers.Contract(props.tokenAddress, ERC721Contract.abi, provider);\r\n    let tokensList = [];\r\n\r\n    tokensList = await Promise.all(items.map(async ({ tokenId, nftContract, itemId, price, seller, owner }) => {\r\n\r\n      const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n      price = ethers.utils.formatEther(price);\r\n\r\n      price = price.toString();\r\n\r\n      console.log(owner, seller);\r\n\r\n      const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n      return {\r\n        name,\r\n        hash,\r\n        createdBy,\r\n        tokenId,\r\n        nftContract,\r\n        itemId,\r\n        price,\r\n        seller\r\n      }\r\n\r\n    }));\r\n\r\n    setMarketItems(tokensList);\r\n\r\n  }\r\n\r\n  const onKeyUpHandler = (event) => {\r\n    setSearch(event.target.value.toLowerCase());\r\n  }\r\n\r\n  return (\r\n    <div className='marketplace'>\r\n      <div className=\"title\">\r\n        <h1>Marketplace</h1>\r\n      </div>\r\n      <div className=\"searchDiv\">\r\n        <div className=\"left\">\r\n          <span>Search</span>\r\n        </div>\r\n        <div className=\"right\">\r\n          <input type=\"text\" placeholder=\"Enter ID or Name\" onKeyUp={(e)=>(onKeyUpHandler(e))}></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"wrapper\">\r\n        <div className=\"market-items\">\r\n          {\r\n            filteredList &&\r\n            filteredList.map((item) => {\r\n              return <MarketItem item={item} marketPlace={marketplace} key={item.itemId} tokenAddress={props.tokenAddress} seller={item.seller} triggerReload={()=> setTriggerReload}></MarketItem>\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Marketplace","import React, { useEffect, Component, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './AccountStatus.scss';\r\n\r\nconst AccountStatus = (props) => {\r\n\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [connectedAcc, setconnectedAcc] = useState('');\r\n\r\n    useEffect(() => {\r\n        setIsConnected(props.isConnected);\r\n        if (props.isConnected) {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            signer.getAddress().then(function (res) {\r\n                setconnectedAcc(res);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='accountStatus'>\r\n            <span>{connectedAcc}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountStatus","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./components/home/Home.js\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport NavBar from \"./components/navbar/NavBar\";\r\nimport Mint from \"./components/mint/Mint\";\r\nimport OwnedNfts from \"./components/myNfts/OwnedNfts\";\r\nimport Marketplace from \"./components/marketplace/Marketplace\";\r\nimport MarketplaceContract from \"./contracts/Marketplace.json\";\r\nimport AccountStatus from \"./components/account/AccountStatus\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\n\r\nconst App = () => {\r\n  const tokenAddress = \"0xba08c3BBD56987728f453a4759b8e4cb430EcdAD\";\r\n  const marketAddress = \"0xa5927bB1f60A400B7693bf80f201B35B7a40817D\";\r\n\r\n  const [listingPrice,setListingPrice] = useState();\r\n\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    try {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n      const marketplaceContract = new ethers.Contract(marketAddress, MarketplaceContract.abi, provider);\r\n    \r\n      const signer = provider.getSigner();\r\n    \r\n        provider.listAccounts().then((accounts) => {\r\n          console.log(accounts);\r\n    \r\n          if (accounts.length === 0) {\r\n            setIsConnected(false)\r\n          } else {\r\n            setIsConnected(true);\r\n            marketplaceContract.connect(signer).getListingPrice().then((price) => {\r\n              price = ethers.utils.formatEther(price.toString());\r\n              setListingPrice(price);\r\n              console.log(price);\r\n            })\r\n          }\r\n    \r\n        })\r\n        \r\n    } catch (error) {\r\n      setIsConnected(false);\r\n    }\r\n    \r\n\r\n    \r\n  }, [isConnected])\r\n\r\n  try {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n      window.location.reload();\r\n    })\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        isConnected &&\r\n        <div className=\"App\">\r\n          <Router>\r\n            <NavBar />\r\n            <AccountStatus isConnected={isConnected} />\r\n            <Routes>\r\n              <Route exact path=\"/\" element={<Home tokenAddress={tokenAddress} />} />\r\n              <Route path=\"/mint\" element={<Mint tokenAddress={tokenAddress} />} />\r\n              <Route path=\"/myNfts\" element={<OwnedNfts tokenAddress={tokenAddress} marketAddress={marketAddress} listingPrice={listingPrice}/>} />\r\n              <Route path=\"/marketplace\" element={<Marketplace tokenAddress={tokenAddress} marketAddress={marketAddress} />} />\r\n            </Routes>\r\n          </Router>\r\n        </div>\r\n      }\r\n      {\r\n        !isConnected && <div>\r\n          <h1 style={{'color': 'black'}}>Please connect to a metamask wallet</h1>\r\n        </div>\r\n      }\r\n    </>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}