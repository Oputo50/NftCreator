{"version":3,"sources":["components/home/Home.js","components/navbar/NavBarData.js","components/navbar/NavBar.js","utils/PinataKeys.js","components/snackbar/Snackbar.js","utils/TriggerSnackbar.js","components/loader/Loader.js","components/mint/Mint.js","components/popup/PopUp.js","components/actions/ReList.js","components/actions/SellNft.js","components/actions/SendNft.js","components/myNfts/OwnedNfts.js","components/marketplace/MarketItem.js","components/marketplace/Marketplace.js","components/account/AccountStatus.js","App.js","serviceWorker.js","index.js","static/x.svg"],"names":["Home","props","useEffect","isConnected","className","to","icon","faShop","size","faHammer","faWallet","isMmInstalled","onClick","connectOnClick","href","target","rel","SidebarData","title","faHome","link","NavBar","useState","sidebar","setSidebar","showSidebar","event","faTimes","map","obj","key","style","faAlignJustify","PinataKeys","apiKey","apiSecret","Snackbar","closeTimeout","setCloseTimeout","beginCloseTimeout","closeSnackBar","clearTimeout","ReactDOM","unmountComponentAtNode","document","getElementById","timer","timeout","setTimeout","messageType","onMouseEnter","onMouseLeave","message","src","xIcon","alt","id","triggerSnackbar","includes","Error","render","showErrorMessage","showSuccessMessage","showWarningMessage","Loader","isActive","Mint","triggerLoader","setTriggerLoader","nftName","setNftName","uploadedFile","setUploadedFile","imageUrl","setImageUrl","artistName","setArtistName","canMint","setCanMint","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","myContract","Contract","tokenAddress","MyTokenContract","abi","checkCanMint","mintNft","nftHash","metadataHash","a","connect","mint","on","tokenId","reloadFields","Array","from","querySelectorAll","forEach","input","value","pinFileToIPFS","file","nftImage","FormData","append","axios","post","maxContentLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","console","log","data","IpfsHash","hash","catch","error","type","onKeyUp","onChange","preventDefault","reader","FileReader","files","onloadend","result","readAsDataURL","click","undefined","PopUp","open","setOpen","wrapperRef","useRef","handleClickOutside","current","contains","addEventListener","removeEventListener","ref","buttonLabel","content","ReList","price","setPrice","InfuraProvider","process","INFURA_KEY","marketplaceContract","marketAddress","Marketplace","changePrice","startLoader","changeItemPrice","itemId","utils","parseEther","tx","wait","triggerReload","name","step","min","faEthereum","SellNft","sellNft","validatePrice","overrides","listingPrice","myNftContract","approve","createMarketItem","SendNft","toAddress","setToAddress","sendNft","isAddress","OwnedNfts","nftData","setNftData","listedItems","setListedItems","unlistedItems","setUnlistedItems","activeTab","setActiveTab","setTriggerReload","tokenContract","MarketplaceContract","fetchOwnedNfts","fetchListedItems","refreshComponent","getOwnedNfts","items","tokensList","Promise","all","toNumber","tokenURI","url","fetch","json","createdBy","getListedItemsBySeller","listedNfts","formatEther","cancelItem","cancelListing","length","nft","index","loading","faPenToSquare","MarketItem","userAccount","setUserAccount","listAccounts","accounts","onBuyClick","marketPlace","sellMarketItem","item","seller","marketItems","setMarketItems","filteredList","setFilteredList","search","setSearch","marketplace","fetchMarketItems","filter","toLowerCase","indexOf","ERC721Contract","nftContract","owner","toString","placeholder","e","AccountStatus","connectedAcc","setconnectedAcc","getAddress","res","App","setListingPrice","setIsConnected","chainId","setChainId","setIsMmInstalled","getCurrNetwork","getListingPrice","location","reload","networkId","getNetwork","enable","exact","path","element","Boolean","hostname","match","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f63b5fbd.chunk.js","sourcesContent":["import React, {useEffect } from \"react\";\r\nimport './Home.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faShop, faWallet, faHammer } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n\r\n\r\n  useEffect(() => {\r\n  \r\n  }, [props.isConnected])\r\n\r\n  return (\r\n    <>\r\n      {props.isConnected &&\r\n        <div className=\"home\">\r\n          <div className=\"title\">\r\n            <h1>Welcome to NFT CREATOR!</h1>\r\n          </div>\r\n\r\n\r\n          <div className=\"wrapper\">\r\n\r\n            <Link to={\"/marketplace\"} className=\"tab\">\r\n              <div className=\"tab-1\">\r\n                <div className=\"message-1\">\r\n                  <h1>Marketplace</h1>\r\n                </div>\r\n                <div className=\"icon\">\r\n                  <FontAwesomeIcon icon={faShop} size={\"3x\"} />\r\n                </div>\r\n              </div>\r\n            </Link>\r\n\r\n            <Link to={\"/mint\"} className=\"tab\">\r\n\r\n              <div className=\"tab-2\">\r\n                <div className=\"message-2\">\r\n                  <h1>Mint Your NFT</h1>\r\n                </div>\r\n                <div className=\"icon\">\r\n                  <FontAwesomeIcon icon={faHammer} size={\"3x\"} />\r\n                </div>\r\n              </div>\r\n\r\n            </Link>\r\n\r\n            <Link to={\"/myNfts\"} className=\"tab\">\r\n              <div className=\"tab-3\">\r\n                <div className=\"message-3\">\r\n                  <h1>Your NFTs</h1>\r\n                </div>\r\n                <div className=\"icon\">\r\n                  <FontAwesomeIcon icon={faWallet} size={\"3x\"} />\r\n                </div>\r\n\r\n              </div>\r\n            </Link>\r\n\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n      {\r\n        !props.isConnected && props.isMmInstalled && <div className=\"home-disabled\">\r\n          <h1>Please connect to a metamask wallet</h1>\r\n          <button onClick={() => { props.connectOnClick() }}>Connect</button>\r\n        </div>\r\n      }\r\n      {\r\n        !props.isMmInstalled && <div className=\"home-disabled\">\r\n          <h4>To access the marketplace you must have metamask installed. You can install it here:</h4>\r\n          <a href=\"https://metamask.io/download/\" target=\"_blank\" rel=\"noopener noreferrer\"><p>https://metamask.io/download/</p></a>\r\n        </div>\r\n      }\r\n\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faHome, faHammer, faWallet, faShop} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nexport const SidebarData =  [\r\n  {\r\n      title: \"Home\",\r\n      icon: <FontAwesomeIcon icon={faHome}/>,\r\n      link: \"/\"\r\n  },\r\n  {\r\n    title: \"Mint\",\r\n    icon: <FontAwesomeIcon icon={faHammer}/>,\r\n    link: \"/mint\"\r\n  },\r\n  {\r\n    title: \"My Nfts\",\r\n    icon: <FontAwesomeIcon icon={faWallet}/>,\r\n    link: \"/myNfts\"\r\n  },\r\n  {\r\n    title: \"Marketplace\",\r\n    icon: <FontAwesomeIcon icon={faShop}/>,\r\n    link: \"/marketplace\"\r\n  }\r\n];\r\n\r\n","import React, { useState } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./NavBar.scss\";\r\nimport {SidebarData} from \"./NavBarData\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faTimes, faAlignJustify} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction NavBar() {\r\n    const [sidebar,setSidebar] = useState(false);\r\n\r\n    const showSidebar = (event) => {\r\n      setSidebar(!sidebar);\r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n       <div className = {sidebar ? \"sidebar-active\" : \"sidebar\"}>\r\n       <div className=\"header\">\r\n              <FontAwesomeIcon onClick={showSidebar} icon={faTimes}></FontAwesomeIcon>\r\n        </div>\r\n        <ul className=\"sidebarList\">\r\n          {SidebarData.map((obj,key)=>{\r\n            return (\r\n              \r\n              <Link to={obj.link} key={key}>\r\n              <li className=\"row\" key={key}>\r\n                <div key={key}>\r\n                  <span className=\"sideBarFont\">{obj.title}</span>\r\n                <div className=\"listIcon\"> {obj.icon} </div>\r\n                </div>\r\n              </li>\r\n              </Link>\r\n            )\r\n          })\r\n\r\n          }\r\n        </ul>\r\n      </div>\r\n      <div style={{'textAlign':'left'}}>\r\n        <FontAwesomeIcon onClick={showSidebar} icon={faAlignJustify} className = {sidebar ? \"menuIcon-hidden\" : \"menuIcon\"}></FontAwesomeIcon>\r\n      </div>\r\n      </>\r\n    );\r\n   \r\n};\r\n\r\nexport default NavBar;","\r\nexport const PinataKeys =  [\r\n    {\r\n        apiKey: \"ca7f12bf77c0e75f0bbf\",\r\n        apiSecret: \"4eb7f35ac6d804926a813b4fcf2d90f63255d2e70ce784626ee38b8e4d0d9be0\"\r\n    }\r\n  ];","import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport \"./Snackbar.css\";\r\nimport xIcon from \"../../static/x.svg\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction Snackbar(props) {\r\n    const [closeTimeout, setCloseTimeout] = useState(null);\r\n\r\n    useEffect(() => {\r\n        beginCloseTimeout();\r\n    },[]);\r\n\r\n\r\n    const closeSnackBar = () => {\r\n        clearTimeout(closeTimeout);\r\n        ReactDOM.unmountComponentAtNode(document.getElementById('snackbar-fixed-container'));\r\n    }\r\n\r\n\r\n    const beginCloseTimeout = () => {\r\n        if (props.timer) {\r\n            const timeout = setTimeout(() => closeSnackBar(), props.timer);\r\n            setCloseTimeout(timeout);\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className={`snackbar-container ${props.messageType}-container`}\r\n            onMouseEnter={() => clearTimeout(closeTimeout)}\r\n            onMouseLeave={() => beginCloseTimeout()}>\r\n            <div>\r\n                <div className=\"snackbar-info-container\">\r\n                    <div>\r\n                        <div className={`snackbar-icon ${props.messageType}-snackbar-icon`}></div>\r\n                    </div>\r\n                    <div>\r\n                        <h5 className=\"rubik-text\">{props.title}</h5>\r\n                        <h5 className=\"muted-rubik-text\">  {props.message}</h5>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <img src={xIcon} onClick={() => closeSnackBar()} alt=\"close icon\" id=\"close-snackbar-icon\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Snackbar","import React from 'react';\r\nimport Snackbar from '../components/snackbar/Snackbar';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst triggerSnackbar = (title, message, messageType) => {\r\n    const validMessageTypes = ['error', 'info', 'warning', 'success'];\r\n    \r\n    if (!validMessageTypes.includes(messageType)) {\r\n        throw Error(\"Invalid snackbar message type\");\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <Snackbar messageType={messageType} timer={5000} title={title} message={message} />,\r\n        document.getElementById('snackbar-fixed-container')\r\n    );\r\n}\r\n\r\n\r\nexport const showErrorMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'error');\r\n}\r\n\r\nexport const showInfoMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'info');\r\n}\r\n\r\nexport const showSuccessMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'success');\r\n}\r\n\r\nexport const showWarningMessage = (title, message) => {\r\n    triggerSnackbar(title, message, 'warning');\r\n}","import React, { useEffect } from 'react';\r\nimport \"./Loader.css\";\r\n\r\nfunction Loader(props) {\r\n\r\n    useEffect(() => {\r\n    \r\n    },[props.isActive])\r\n\r\n  return (\r\n      <div className={props.isActive ? 'loaderWrapper-active' : 'loaderWrapper'}>\r\n             <div className='lds-hourglass loader'></div>\r\n             <div><h1 style={{'color':'black'}}>Loading ...</h1></div>\r\n      </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Loader","import React, {useEffect, useState } from 'react';\r\nimport MyTokenContract from \"../../contracts/MyToken.json\";\r\nimport \"./Mint.scss\"\r\nimport axios from \"axios\";\r\nimport { PinataKeys } from \"../../utils/PinataKeys\";\r\nimport { ethers} from 'ethers';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\nimport Loader from '../loader/Loader';\r\n\r\n\r\nfunction Mint(props) {\r\n\r\n    const [triggerLoader, setTriggerLoader] = useState(false);\r\n\r\n    const [nftName, setNftName] = useState(\"\");\r\n\r\n    const [uploadedFile, setUploadedFile] = useState(null);\r\n\r\n    const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n    const [artistName, setArtistName] = useState(\"\");\r\n\r\n    const [canMint, setCanMint] = useState(false);\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n    const myContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n    useEffect(() => {\r\n        checkCanMint();\r\n    }, [artistName, imageUrl, nftName, canMint])\r\n\r\n\r\n    const mintNft = async (nftHash, metadataHash) => {\r\n\r\n        setTriggerLoader(true);\r\n\r\n        try {\r\n            await myContract.connect(signer).mint(nftHash, metadataHash);\r\n\r\n            myContract.on(\"tokenMint\", (tokenId) => {\r\n\r\n                showSuccessMessage(\"Congratulations!\", \"NFT successfully minted!\");\r\n                reloadFields();\r\n                setTriggerLoader(false);\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorMessage(error.message);\r\n            setTriggerLoader(false);\r\n        }\r\n\r\n    };\r\n\r\n    const handleNftNameOnChange = (event) => {\r\n        setNftName(event.target.value);\r\n\r\n    }\r\n\r\n    const handleArtistNameOnChange = (event) => {\r\n        setArtistName(event.target.value);\r\n    }\r\n\r\n    const placeholderOnClick = () => {\r\n        document.getElementById('uploadImage').click();\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n\r\n        try {\r\n            pinFileToIPFS(uploadedFile);\r\n        } catch (error) {\r\n            showErrorMessage(\"Something went wrong!\", error.message);\r\n        }\r\n\r\n    }\r\n\r\n    const checkCanMint = () => {\r\n        if (nftName !== \"\" && artistName !== \"\" && imageUrl !== \"\") {\r\n            setCanMint(true);\r\n        }\r\n\r\n        if (canMint && (nftName === '' || artistName === '' || imageUrl === '')) {\r\n            setCanMint(false);\r\n        }\r\n    }\r\n\r\n    const reloadFields = () => {\r\n\r\n        setUploadedFile(null);\r\n        setNftName(\"\");\r\n        setArtistName(\"\");\r\n        setImageUrl(\"\");\r\n\r\n        Array.from(document.querySelectorAll(\"input\")).forEach(\r\n            input => (input.value = \"\")\r\n          );\r\n       \r\n    }\r\n\r\n    const fileOnChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n\r\n        let file = event.target.files[0];\r\n\r\n        setUploadedFile(file);\r\n\r\n        reader.onloadend = () => {\r\n            console.log(\"reading file\");\r\n            setImageUrl(reader.result);\r\n        }\r\n\r\n        reader.readAsDataURL(file);\r\n\r\n    }\r\n\r\n    const pinFileToIPFS = async (file) => {\r\n        const fileUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n\r\n        const jsonUrl = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n\r\n        let nftImage = new FormData();\r\n\r\n        nftImage.append(\"file\", file);\r\n\r\n\r\n        axios.post(fileUrl, nftImage, {\r\n            maxContentLength: \"Infinity\",\r\n            headers: {\r\n                \"Content-Type\": `multipart/form-data; boundary=${nftImage._boundary}`,\r\n                pinata_api_key: PinataKeys[0].apiKey,\r\n                pinata_secret_api_key: PinataKeys[0].apiSecret,\r\n            }\r\n        }).then(function (response) {\r\n            console.log(response.data.IpfsHash)\r\n\r\n            return response.data.IpfsHash\r\n\r\n        }).then(function (hash) {\r\n\r\n            axios.post(jsonUrl, {\r\n                \"name\": nftName,\r\n                \"hash\": hash,\r\n                \"createdBy\": artistName\r\n            }, {\r\n                headers: {\r\n                    pinata_api_key: PinataKeys[0].apiKey,\r\n                    pinata_secret_api_key: PinataKeys[0].apiSecret,\r\n                }\r\n            }).then(function (response) {\r\n\r\n                const metadataHash = \"ipfs/\" + response.data.IpfsHash;\r\n\r\n                mintNft(hash, metadataHash);\r\n            }).catch(function (error) {\r\n                console.log(error);\r\n            })\r\n        })\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <Loader isActive={triggerLoader} />\r\n        <div className=\"mint\">\r\n            <div className=\"title\">\r\n                <h1>Mint Your NFT</h1>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"wrapper\">\r\n                    <div className=\"left\">\r\n                        <div className=\"inputBox\">\r\n                            <label className=\"boldFont\">Type your NFT name</label>\r\n                            <input type=\"text\" onKeyUp={handleNftNameOnChange} className=\"inputField\"></input>\r\n                        </div>\r\n\r\n\r\n                        <input id='uploadImage' type=\"file\" onChange={fileOnChange} className=\"inputField imageInput\"></input>\r\n\r\n                        <div className=\"inputBox\">\r\n                            <label className=\"boldFont\">Artist Name</label>\r\n                            <input type=\"text\" onKeyUp={handleArtistNameOnChange} className=\"inputField\"></input>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"right\">\r\n                        <div className=\"imageCtn\" onClick={placeholderOnClick}>\r\n                            {imageUrl && <img alt='NFT'  src={imageUrl} className=\"image\"></img>}\r\n                            {imageUrl === '' && <div className=\"image\"><h1>Please upload an image</h1></div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"button\">\r\n                    <div onClick={canMint ? handleSubmit : undefined} className={canMint ? 'mintBtn' : \"mintBtn-disabled\"}><span>Mint</span></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Mint","import React, { useEffect, useState, useRef } from \"react\";\r\nimport './PopUp.scss';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst PopUp = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const wrapperRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (wrapperRef.current && !wrapperRef.current.contains(event.target) && open) {\r\n        setOpen(false);\r\n      }\r\n    }\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [open]);\r\n\r\n\r\n  return (\r\n    <div className=\"popup\" ref={wrapperRef}>\r\n\r\n      <div>\r\n        <button onClick={() => setOpen(!open)}> {props.buttonLabel} </button>\r\n        {open && (\r\n          <>\r\n            <div className=\"popup-content\">\r\n              <div className=\"exit\">\r\n                <FontAwesomeIcon className=\"icon\" onClick={() => setOpen(false)} icon={faTimes} size={\"2x\"}  />\r\n              </div>\r\n              {props.content}\r\n            </div>\r\n\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PopUp;","import React, {useState} from 'react';\r\nimport \"./Actions.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\nimport { ethers } from 'ethers';\r\nimport Marketplace from \"../../contracts/Marketplace.json\";\r\n\r\nfunction ReList(props) {\r\n    const [price, setPrice] = useState(\"\");\r\n    const provider = new ethers.providers.InfuraProvider(\"ropsten\",process.env.INFURA_KEY);\r\n    const signer = provider.getSigner();\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, Marketplace.abi, provider);\r\n\r\n    const handlePriceChange = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n\r\n    const changePrice = async () => {\r\n      try {\r\n        props.startLoader(true);\r\n       let tx = await marketplaceContract.connect(signer).changeItemPrice(props.itemId, ethers.utils.parseEther(price));\r\n       await tx.wait();\r\n        marketplaceContract.on(\"ItemPriceChanged\",() => {\r\n         console.log(\"on item price change\");\r\n         props.startLoader(false);\r\n         showSuccessMessage(\"Yay!\",\"The price of your NFT have been succefully changed.\");\r\n         props.triggerReload();\r\n      })\r\n       \r\n      } catch (error) {\r\n        showErrorMessage(error.message);\r\n        props.startLoader(false);\r\n      }\r\n    }\r\n\r\n  return (\r\n  \r\n       \r\n            <div className=\"actions-content\">\r\n                <div>\r\n                <p>{\"Please enter \" + props.name + \" #\"+ props.tokenId + \"'s price\"}</p>\r\n                    <input onChange={handlePriceChange} className=\"mt-3\" type=\"number\" step=\"0.01\" min=\"0\"></input>\r\n                    <FontAwesomeIcon style={{'marginLeft':'10px'}} icon={faEthereum}  size={\"2x\"}/>\r\n                </div>\r\n                <div className='actions'>\r\n                    <button className='action-btn' onClick={changePrice}>Change Price</button>\r\n                </div>\r\n            </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ReList","import React, { useState} from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { utils } from 'ethers';\r\nimport MyTokenContract from \"../../contracts/MyToken.json\"\r\nimport Marketplace from \"../../contracts/Marketplace.json\";\r\nimport \"./Actions.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { showErrorMessage, showSuccessMessage, showWarningMessage } from '../../utils/TriggerSnackbar';\r\n\r\n\r\nfunction SellNft(props) {\r\n    const [price, setPrice] = useState(\"\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, Marketplace.abi, provider);\r\n\r\n    const handlePriceChange = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n\r\n    const sellNft = async () => {\r\n\r\n        if (validatePrice()) {\r\n            const signer = provider.getSigner();\r\n\r\n            let overrides = { value: utils.parseEther(props.listingPrice) };\r\n\r\n            let myNftContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n            await myNftContract.connect(signer).approve(props.marketAddress, props.tokenId);\r\n\r\n            showWarningMessage(\"\", \"Approving...\");\r\n\r\n            props.startLoader(true);\r\n\r\n            try {\r\n                await marketplaceContract.connect(signer).createMarketItem(props.tokenAddress, props.tokenId, utils.parseEther(price), overrides);\r\n\r\n                marketplaceContract.on(\"MarketItemCreated\", ({ tokenId }) => {\r\n                    props.triggerReload();\r\n                    props.startLoader(false);\r\n                    showSuccessMessage(\"Yay!\", \"You NFT was successfully listed!\");\r\n                })\r\n            } catch (error) {\r\n                props.startLoader(false);\r\n                showErrorMessage(error.message);\r\n            }\r\n\r\n\r\n\r\n        } else {\r\n            showErrorMessage(\"Oops!\", \"NFT price must be greater than 0 ether\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const validatePrice = () => {\r\n        if (price <= 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"actions-content\">\r\n            <div>\r\n                <p>{\"Please enter \" + props.name + \" #\" + props.tokenId + \"'s price\"}</p>\r\n                <input onChange={handlePriceChange} className=\"mt-3\" type=\"number\" step=\"0.01\" min=\"0\"></input>\r\n                <FontAwesomeIcon style={{ 'marginLeft': '10px' }} icon={faEthereum} size={\"2x\"} />\r\n            </div>\r\n            <div className='actions'>\r\n                <button className='action-btn' onClick={sellNft}>Sell</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SellNft","import React, { useEffect, useState} from \"react\";\r\nimport {ethers} from \"ethers\";\r\nimport MyTokenContract from \"../../contracts/MyToken.json\"\r\nimport './Actions.scss';\r\nimport { showErrorMessage, showSuccessMessage } from \"../../utils/TriggerSnackbar\";\r\n\r\nconst SendNft = (props) => {\r\n    const [toAddress, setToAddress] = useState('');\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const myNftContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n    const signer = provider.getSigner();\r\n\r\n    useEffect(() => {\r\n\r\n    }, [toAddress]);\r\n\r\n    const handleTextChange = (event) => {\r\n        console.log(toAddress);\r\n        setToAddress(event.target.value);\r\n    }\r\n\r\n    const sendNft = async () => {\r\n\r\n        if (ethers.utils.isAddress(toAddress)) {\r\n           props.startLoader(true);\r\n           await myNftContract.connect(signer).sendNft(toAddress, props.tokenId);\r\n           props.startLoader(false);\r\n           props.triggerReload();\r\n            showSuccessMessage(\"Yay!\", \"Your NFT was successfully sent.\");\r\n        } else {\r\n            showErrorMessage(\"Oops!\", \"You must enter a valid address\");\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    return (    \r\n            <div className=\"actions-content\">\r\n                <div>\r\n                    <p>Please insert a valid address</p>\r\n                    <input onChange={handleTextChange}></input>\r\n                </div>\r\n                <div className=\"actions\">\r\n                    <button className='action-btn' onClick={sendNft}>Send</button>\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SendNft;","import React, { useState, useEffect } from \"react\";\r\nimport MyTokenContract from \"../../contracts/MyToken.json\";\r\nimport MarketplaceContract from \"../../contracts/Marketplace.json\";\r\nimport { ethers } from \"ethers\";\r\nimport \"./OwnedNfts.scss\";\r\nimport { showErrorMessage, showSuccessMessage } from \"../../utils/TriggerSnackbar\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPenToSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faEthereum } from \"@fortawesome/free-brands-svg-icons/faEthereum\";\r\nimport Loader from \"../loader/Loader\";\r\nimport PopUp from \"../popup/PopUp\";\r\nimport ReList from \"../actions/ReList\";\r\nimport SellNft from \"../actions/SellNft\";\r\nimport SendNft from \"../actions/SendNft\";\r\n\r\nconst OwnedNfts = (props) => {\r\n\r\n    const [nftData, setNftData] = useState();\r\n\r\n    const [listedItems, setListedItems] = useState();\r\n\r\n    const [unlistedItems, setUnlistedItems] = useState();\r\n\r\n    const [activeTab, setActiveTab] = useState(\"UI\");\r\n\r\n    const [triggerReload, setTriggerReload] = useState(false);\r\n\r\n    const [triggerLoader, setTriggerLoader] = useState(false);\r\n\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n    const tokenContract = new ethers.Contract(props.tokenAddress, MyTokenContract.abi, provider);\r\n\r\n    const marketplaceContract = new ethers.Contract(props.marketAddress, MarketplaceContract.abi, provider);\r\n\r\n    const signer = provider.getSigner();\r\n\r\n\r\n    useEffect(() => {\r\n        setTriggerLoader(true);\r\n        fetchOwnedNfts();\r\n        fetchListedItems();\r\n        setTriggerLoader(false);\r\n\r\n    }, [triggerReload])\r\n\r\n    useEffect(() => {\r\n        if (activeTab === \"LI\") {\r\n            setNftData(listedItems)\r\n        } else {\r\n            setNftData(unlistedItems);\r\n        }\r\n\r\n    }, [activeTab,nftData,triggerLoader])\r\n\r\n\r\n    const refreshComponent = () => {\r\n        setTriggerReload(!triggerReload);\r\n    }\r\n\r\n\r\n    const fetchOwnedNfts = async () => {\r\n        const items = await tokenContract.connect(signer).getOwnedNfts();\r\n\r\n        let tokensList = [];\r\n\r\n        tokensList = await Promise.all(items.map(async (tokenId) => {\r\n            tokenId = tokenId.toNumber();\r\n\r\n            const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n            const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n            return {\r\n                name,\r\n                hash,\r\n                createdBy,\r\n                tokenId\r\n            }\r\n\r\n        }));\r\n\r\n        setUnlistedItems(tokensList);\r\n        setNftData(activeTab === \"UI\"? tokensList : []);\r\n    }\r\n\r\n    const fetchListedItems = async () => {\r\n        const items = await marketplaceContract.connect(signer).getListedItemsBySeller();\r\n\r\n        let listedNfts = [];\r\n\r\n        listedNfts = await Promise.all(items.map(async ({ tokenId, itemId, price }) => {\r\n            tokenId = tokenId.toNumber();\r\n            itemId = itemId.toNumber();\r\n            price = ethers.utils.formatEther(price);\r\n\r\n            const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n            const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n            return {\r\n                name,\r\n                hash,\r\n                createdBy,\r\n                tokenId,\r\n                itemId,\r\n                price\r\n            }\r\n\r\n        }));\r\n\r\n        setListedItems(listedNfts);\r\n        setNftData(activeTab === \"LI\"? listedNfts : []);\r\n    }\r\n\r\n    const cancelItem = async (itemId) => {\r\n\r\n        try {\r\n            setTriggerLoader(true);\r\n            await marketplaceContract.connect(signer).cancelListing(props.tokenAddress, itemId);\r\n            setTriggerLoader(false);\r\n            showSuccessMessage(\"Success!\", \"Your item was unlisted.\")\r\n            refreshComponent();\r\n        } catch (error) {\r\n            showErrorMessage(error.message);\r\n            setTriggerLoader(false);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Loader isActive={triggerLoader} />\r\n            <div className=\"ownedNfts\">\r\n                <div className=\"title\">\r\n                    <h1>Your NFT's</h1>\r\n                </div>\r\n                <div className=\"listingPrice\">\r\n                    {'Listing price is ' + props.listingPrice + \" ether\"}\r\n                </div>\r\n                {listedItems && unlistedItems && <div className=\"tabs\">\r\n                    <div className={activeTab === \"UI\" ? \"tab active\" : \"tab\"} onClick={() => { setActiveTab(\"UI\") }}>{\"Unlisted items (\" + unlistedItems.length + \")\"}</div>\r\n                    <div className={activeTab === \"LI\" ? \"tab active\" : \"tab\"} onClick={() => { setActiveTab(\"LI\") }}>{\"Listed items (\" + listedItems.length + \")\"}</div>\r\n                </div>}\r\n                <div className=\"wrapper\">\r\n                    {nftData && (\r\n                        <div className=\"content-list\">\r\n                            {\r\n                                nftData.map((nft, index) => (\r\n\r\n                                    <div className=\"content\" key={index}>\r\n                                        <div className=\"item\">\r\n                                            <div className=\"nft\">\r\n                                                <div className=\"nft-name\">\r\n                                                    <span>{nft.name}</span>\r\n                                                </div>\r\n                                                <div className=\"nft-image\">\r\n                                                    <img alt=\"NFT\" className=\"image\" loading=\"lazy\" src={\"https://gateway.pinata.cloud/ipfs/\" + nft.hash}></img>\r\n                                                </div>\r\n                                                <div className=\"nft-actions\">\r\n                                                    {\r\n                                                        activeTab === \"UI\" && <>\r\n                                                            <PopUp buttonLabel={'Sell NFT'} content={<SellNft tokenAddress={props.tokenAddress} triggerReload={refreshComponent} marketAddress={props.marketAddress} tokenId={nft.tokenId} name={nft.name} listingPrice={props.listingPrice} startLoader={setTriggerLoader} />} />\r\n                                                            <PopUp buttonLabel={'Send NFT'} content={<SendNft tokenAddress={props.tokenAddress} triggerReload={refreshComponent} tokenId={nft.tokenId} startLoader={setTriggerLoader} />} />\r\n                                                        </>\r\n                                                    }\r\n                                                    {\r\n                                                        activeTab === \"LI\" && <>\r\n                                                            <div className=\"edit-price\">\r\n                                                                <div style={{ 'color': 'black' }}>\r\n                                                                    {\"Price: \" + nft.price}\r\n                                                                    <FontAwesomeIcon className=\"edit-icon\" icon={faEthereum} />\r\n                                                                </div>\r\n                                                                <div >\r\n                                                                    <PopUp buttonLabel={<FontAwesomeIcon icon={faPenToSquare} />} content={<ReList tokenAddress={props.tokenAddress} marketAddress={props.marketAddress} triggerReload={refreshComponent} name={nft.name} tokenId={nft.tokenId} itemId={nft.itemId} startLoader={setTriggerLoader} />} />\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <button onClick={() => { cancelItem(nft.itemId) }}>Cancel Listing</button>\r\n                                                        </>\r\n                                                    }\r\n\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                ))\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    )}\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default OwnedNfts;\r\n\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./MarketItem.scss\";\r\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons/faEthereum';\r\nimport { ethers } from 'ethers';\r\nimport { showErrorMessage, showSuccessMessage } from '../../utils/TriggerSnackbar';\r\n\r\nfunction MarketItem(props) {\r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  const signer = provider.getSigner();\r\n\r\n  const [userAccount, setUserAccount] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    provider.listAccounts().then((accounts) => {\r\n      setUserAccount(accounts[0]);\r\n    })\r\n\r\n\r\n  }, [userAccount,provider])\r\n\r\n  const onBuyClick = async () => {\r\n    console.log(userAccount);\r\n    try {\r\n      await props.marketPlace.connect(signer).sellMarketItem(props.tokenAddress, props.item.itemId, { value: ethers.utils.parseEther(props.item.price) });\r\n      showSuccessMessage(\"Comgratulations!\", \"You have successfully bought \" + props.item.name + \" NFT.\");\r\n      props.triggerReload();\r\n    } catch (error) {\r\n      showErrorMessage(\"Something went wrong!\", error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"item\">\r\n        <div className=\"market-item\">\r\n          <div className=\"market-item-name\">\r\n          <span>{props.item.name}</span>\r\n          </div>\r\n          <div className=\"market-item-image\">\r\n            <img className=\"image\" alt='NFT' src={\"https://gateway.pinata.cloud/ipfs/\" + props.item.hash}></img>\r\n          </div>\r\n          <div className=\"market-item-actions\">\r\n            {\r\n              props.seller !== userAccount && <button onClick={onBuyClick}>Buy</button>\r\n            }\r\n\r\n            <div className=\"price\">\r\n              <span>{\"Price: \" + props.item.price}</span>\r\n              <FontAwesomeIcon icon={faEthereum} className=\"icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarketItem","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport MarketplaceContract from \"../../contracts/Marketplace.json\";\r\nimport ERC721Contract from \"../../contracts/ERC721.json\";\r\nimport \"./Marketplace.scss\";\r\nimport MarketItem from './MarketItem';\r\nimport Loader from '../loader/Loader';\r\n\r\nfunction Marketplace(props) {\r\n\r\n  const [marketItems, setMarketItems] = useState([]);\r\n\r\n  const [filteredList, setFilteredList] = useState([]);\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [triggerReload,setTriggerReload] = useState(false);\r\n\r\n  const [triggerLoader, setTriggerLoader] = useState(false);\r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  const marketplace = new ethers.Contract(props.marketAddress, MarketplaceContract.abi, provider);\r\n\r\n  const signer = provider.getSigner();\r\n\r\n\r\n  useEffect(() => {\r\n    setTriggerLoader(true);\r\n    fetchMarketItems();\r\n\r\n  }, [triggerReload])\r\n\r\n  useEffect(() => {\r\n\r\n  }, [triggerLoader]);\r\n\r\n  useEffect(() => {\r\n    if(marketItems.length !== 0){\r\n    const filteredList = marketItems.filter((item) => {\r\n      let all_str = `${item.tokenId} ${item.name}`.toLowerCase();\r\n   \r\n      return all_str.indexOf(search) > -1 \r\n    });\r\n    setFilteredList(filteredList);\r\n  }\r\n\r\n  }, [search,marketItems])\r\n\r\n  const fetchMarketItems = async () => {\r\n    const items = await marketplace.connect(signer).fetchMarketItems();\r\n    let tokenContract = new ethers.Contract(props.tokenAddress, ERC721Contract.abi, provider);\r\n    let tokensList = [];\r\n\r\n    tokensList = await Promise.all(items.map(async ({ tokenId, nftContract, itemId, price, seller, owner }) => {\r\n\r\n      const url = await tokenContract.connect(signer).tokenURI(tokenId);\r\n\r\n      price = ethers.utils.formatEther(price);\r\n\r\n      price = price.toString();\r\n\r\n      const { name, hash, createdBy } = await (await fetch(\"https://gateway.pinata.cloud/\" + url)).json();\r\n\r\n      return {\r\n        name,\r\n        hash,\r\n        createdBy,\r\n        tokenId,\r\n        nftContract,\r\n        itemId,\r\n        price,\r\n        seller\r\n      }\r\n\r\n    }));\r\n\r\n    setMarketItems(tokensList);\r\n    setTriggerLoader(false);\r\n\r\n  }\r\n\r\n  const onKeyUpHandler = (event) => {\r\n    setSearch(event.target.value.toLowerCase());\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Loader isActive={triggerLoader} />\r\n    <div className='marketplace'>\r\n      <div className=\"title\">\r\n        <h1>Marketplace</h1>\r\n      </div>\r\n      <div className=\"searchDiv\">\r\n        <div className=\"left\">\r\n          <span>Search</span>\r\n        </div>\r\n        <div className=\"right\">\r\n          <input type=\"text\" placeholder=\"Enter ID or Name\" onKeyUp={(e)=>(onKeyUpHandler(e))}></input>\r\n        </div>\r\n      </div>\r\n        <div className=\"market-items\">\r\n          {\r\n            filteredList &&\r\n            filteredList.map((item) => {\r\n              return <MarketItem item={item} marketPlace={marketplace} key={item.itemId} tokenAddress={props.tokenAddress} seller={item.seller} triggerReload={()=> setTriggerReload}></MarketItem>\r\n            })\r\n          }\r\n      </div>\r\n\r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Marketplace","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './AccountStatus.scss';\r\n\r\nconst AccountStatus = (props) => {\r\n\r\n    const [connectedAcc, setconnectedAcc] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (props.isConnected) {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            signer.getAddress().then(function (res) {\r\n                setconnectedAcc(res);\r\n            })\r\n        }\r\n    }, [props.isConnected])\r\n\r\n\r\n    return (\r\n        <div className='accountStatus'>\r\n            <span>{connectedAcc}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountStatus","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./components/home/Home.js\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport NavBar from \"./components/navbar/NavBar\";\r\nimport Mint from \"./components/mint/Mint\";\r\nimport OwnedNfts from \"./components/myNfts/OwnedNfts\";\r\nimport Marketplace from \"./components/marketplace/Marketplace\";\r\nimport MarketplaceContract from \"./contracts/Marketplace.json\";\r\nimport AccountStatus from \"./components/account/AccountStatus\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { showErrorMessage } from \"./utils/TriggerSnackbar\";\r\n\r\n\r\nconst App = () => {\r\n  const tokenAddress = \"0x2d9544c343b3f32A82FBE79C45cc57Aef7345407\";\r\n  const marketAddress = \"0xA9A2E9F64A9cc67508d244548A0787207206D214\";\r\n  const [listingPrice, setListingPrice] = useState();\r\n\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  const [chainId, setChainId] = useState(0);\r\n\r\n  const [isMmInstalled, setIsMmInstalled] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      setIsMmInstalled(true);\r\n    }\r\n\r\n    if (isMmInstalled) {\r\n      try {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        const marketplaceContract = new ethers.Contract(marketAddress, MarketplaceContract.abi, provider);\r\n        const signer = provider.getSigner();\r\n        getCurrNetwork();\r\n        console.log(chainId,\"chainId\");\r\n\r\n        provider.listAccounts().then((accounts) => {\r\n\r\n          if (accounts.length === 0) {\r\n            setIsConnected(false)\r\n          } else {\r\n            setIsConnected(true);\r\n            marketplaceContract.connect(signer).getListingPrice().then((price) => {\r\n              price = ethers.utils.formatEther(price.toString());\r\n              setListingPrice(price);\r\n            })\r\n          }\r\n\r\n        })\r\n\r\n      } catch (error) {\r\n        setIsConnected(false);\r\n      }\r\n    }\r\n\r\n  }, [isConnected,isMmInstalled,listingPrice])\r\n\r\n  useEffect(() => {\r\n\r\n  }, [chainId]);\r\n\r\n  try {\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n      window.location.reload();\r\n    })\r\n\r\n    window.ethereum.on('networkChanged', function(networkId){\r\n      window.location.reload();\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  const getCurrNetwork = async () => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n    let { chainId } = await provider.getNetwork();\r\n    setChainId(chainId);\r\n\r\n    if (chainId !== 3) {\r\n      showErrorMessage(\"Wrong network\", \"Please make sure you are connected to Ropsten network\");\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const connectOnClick = async () => {\r\n    try {\r\n      let accountAddress = await window.ethereum.enable();\r\n      if (accountAddress !== undefined) {\r\n        setIsConnected(true);\r\n      }\r\n    } catch (error) {\r\n      showErrorMessage(\"\",error.message);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"App\">\r\n        <Router>\r\n          {isConnected && <NavBar />}\r\n          {isConnected && <AccountStatus isConnected={isConnected} />}\r\n          <Routes>\r\n            <Route exact path=\"/\" element={<Home isMmInstalled = {isMmInstalled} tokenAddress={tokenAddress} connectOnClick={connectOnClick} isConnected={isConnected} />} />\r\n            <Route path=\"/mint\" element={<Mint tokenAddress={tokenAddress} />} />\r\n            <Route path=\"/myNfts\" element={<OwnedNfts tokenAddress={tokenAddress} marketAddress={marketAddress} listingPrice={listingPrice} />} />\r\n            <Route path=\"/marketplace\" element={<Marketplace tokenAddress={tokenAddress} marketAddress={marketAddress} />} />\r\n          </Routes>\r\n        </Router>\r\n      </div>\r\n\r\n    </>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/x.a517e8be.svg\";"],"sourceRoot":""}